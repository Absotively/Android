function setUp()
  setUpPuzzlePieces(shiftBagGUID)
  setUpPuzzlePieces(favorBagGUID)
  setUpPuzzlePieces(baggageBagGUID)

  getObjectFromGUID(evidenceBagGUID).randomize()
  getObjectFromGUID(genericEventDeckGUID).randomize()

  playerCount = countAndRemovePlayers()
  murder = chooseMurder()
  setUpMurder(murder, playerCount)
end

function countAndRemovePlayers()
  colors = Player.getAvailableColors()
  playerCount = 0
  for _, color in ipairs(colors) do
    if Player[color].seated then
      playerCount = playerCount + 1
    else
      guids = playerObjectGUIDs[color]
      for item, guid in pairs(guids) do
        getObjectFromGUID(guid).destruct()
      end
    end
  end
  return playerCount
end

function setUpPuzzlePieces(bagGUID)
  bag = getObjectFromGUID(bagGUID)
  pos = bag.getPosition()
  bag.setPosition({pos.x + 5, pos.y, pos.z })
  bag.randomize()
  tileInfo = bag.getObjects()
  for j, tile in ipairs(tileInfo) do
    bag.takeObject({
      position = ({pos.x, pos.y + (0.3 * j), pos.z}),
      smooth = false
    })
  end
  bag.destruct()
end

function chooseMurder()
  for _, object in pairs(murderTrayZone.getObjects()) do
    name = murderNameFromBag(object)
    if name != nil then
      return name
    end
  end
  murdersBag = getObjectFromGUID(murdersBagGUID)
  murdersBag.randomize()
  murderBag = murdersBag.takeObject()
  murdersBag.destruct()
  return murderBag.getName()
end

function setUpMurder(murder, playerCount)
  sheet = getMurderSheet(murder)
  rotation = murderTrayLiner.getRotation()
  sheet.setRotation(rotation)
  sheet.setPosition(getSheetPlacement(playerCount, 0))
  guiltyDeck = getObjectFromGUID(guiltyHunchDeckGUID)
  innocentDeck = getObjectFromGUID(innocentHunchDeckGUID)
  suspectDeck = getObjectFromGUID(suspectDeckGUID)
  for i = 1, playerCount + 1 do
    suspect = murderData[murder]["suspects"][i]["id"]
    suspectSheet = suspectDeck.takeObject({ guid = suspectData[suspect]["guids"]["sheet"] })
    suspectSheet.setRotation(rotation)
    suspectSheet.setPosition(getSheetPlacement(playerCount, i))
    print(suspectSheet.getBounds().size.z)
    guiltyCard = guiltyDeck.takeObject({guid = suspectData[suspect]["guids"]["guiltyHunchCard"]})
    guiltyDeck.putObject(guiltyCard)  -- put suspects in play on top, will destroy bottom cards before shuffling
    innocentCard = innocentDeck.takeObject({guid = suspectData[suspect]["guids"]["innocentHunchCard"]})
    innocentDeck.putObject(innocentCard)
  end
  if playerCount < 5 then
    for i = 1, 5 - playerCount do
      guiltyDeck.takeObject({top = false}).destruct()
      innocentDeck.takeObject({top = false}).destruct()
    end
  end
  guiltyDeck.randomize()
  guiltyDeck.deal(1)
  innocentDeck.randomize()
  innocentDeck.deal(1)
end

function getSheetPlacement(playerCount, sheet)
  space = murderTrayLiner.getBounds()
  sheetWidth = 8.74
  sheetSpacing = 0.5
  leftMost = space.center.z - ((playerCount+2)*sheetWidth + (playerCount+1)*sheetSpacing)/2
  z = leftMost + (sheetWidth + sheetSpacing) * sheet
  y = space.center.y + space.size.y / 2 + 0.1
  x = space.center.x
  return {x, y, z}
end
